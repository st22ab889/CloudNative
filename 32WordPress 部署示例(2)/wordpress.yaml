---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deploy
  namespace: blog
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  revisionHistoryLimit: 10
  # 当新的pod启动5s种后,再kill掉旧的pod.如果没有设置该值,Kubernetes会假设该容器启动起来后就提供服务
  minReadySeconds: 5
  # 滚动更新策略
  strategy:
    type: RollingUpdate
    # 根据"replicas: 1"和下面maxSurge和maxUnavailable的值可以知道,当启动一个Pod成功之后,才会把之前Pod停止,这样就做到了滚动更新
    rollingUpdate:
      # 最多能够比更新前的Pod数量多一个
      maxSurge: 1
      # 最多有一个Pod不可用
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      # wordpress依赖mysql,部署wordpress时并不能保证mysql已经启动.
      # 这里使用initContainers检查mysql这个服务,直到mysql服务创建完成后,initContainer才结束,然后再部署wordpress这个Pod
      initContainers:
      - name: init-db
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup mysql; do echo waiting for mysql service; sleep 2; done;']
      containers:
      - name: wordpress
        image: wordpress
        imagePullPolicy: IfNotPresent
        # 健康检查是针对容器的,所以 livenessProbe 和 readinessProbe 和容器平级
        # 存活性探针,容器初始化10秒后检测,每隔3s检测一次80端口,如果检测失败就会重启这个容器   
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 3
        # 可读性探针是探测应用是否可读,不可读会在Service的Endpoints中给移除掉,可读才加入到Service的Endpoints中
        # 容器启动15s后检测,每隔10s检测一次80端口.因为是通过Service访问,这样就能保证Service的Endpoints中是正常的服务,不正常的会被移除掉了
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
        ports:
        - containerPort: 80
          name: wdport
        env:
        - name: WORDPRESS_DB_HOST
          # 这里直接设置mysql服务的clusterIP是有问题的,如果mysql服务被重新创建了,它的clusterIP很有可能就变化
          # 可以直接使⽤ Service 的名称来代替 clusterIP(也就是host),这样即使 clusterIP 变化了,也不会有任何影响
          # 如果wordpress和mysql在同一命名空间,直接用 mysql; 如果mysql在db这个namespace下面,就用 mysql.db 这种形式
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          value: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: blog
spec:
  selector:
    app: wordpress
  type: NodePort
  ports:
  - name: wordpressport
    protocol: TCP
    port: 80
    targetPort: wdport
    # 注意 ：之前访问是通过30797这个端口,wordpress会把这个url存到数据库中,重新部署后nodePort变了的话也会跳转到30797上面来
    # 最好的方法是在定义wordpress的service指定一个nodeport,以后都通过指定的这个nodeport访问.
    # 不指定nodePort会自动生成一个随机端口,端口的默认范围是"30000-32767",这个范围在安装集群的时候可以配置
    nodePort: 30797
