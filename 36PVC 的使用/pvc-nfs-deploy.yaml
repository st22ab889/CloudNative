# PV
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs
  labels:
    app: pv-nfs
spec:
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  nfs:
    server: 192.168.32.100
    path: /data/k8s

# PVC
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      # 因为PV的容量大于PVC声明的容量,所以能绑定成功
      storage: 1Gi
  selector:
    matchLabels:
      app: pv-nfs

# Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pvc-nfs-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: pvc-nfs-pod
  template:
    metadata:
      labels:
        app: pvc-nfs-pod
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: nginx-port
        volumeMounts:
        - name: pvc-nfs-volume
          # 如果不加subPath,容器中的数据是直接放到共享数据⽬录根⽬录下⾯,
          # 如果后面有新的容器的数据⽬录也挂载到nfs,这时候就有冲突
          # 为了区分, 在 Pod 中使⽤属性 subPath,最终是把共享目录下的nginx-pvc-test目录挂载到"/usr/share/nginx/html"
          # "nginx-pvc-test" 这个目录会被自动在共享数据⽬录根⽬录下⾯创建
          subPath: nginx-pvc-test 
          mountPath: /usr/share/nginx/html
      volumes:
      - name: pvc-nfs-volume
        # 和PVC进行绑定
        persistentVolumeClaim:
          claimName: pvc-nfs

# Service
---
apiVersion: v1
kind: Service
metadata:
  name: pvc-nfs-svc
  labels:
    app: pvc-nfs-svc
spec:
  type: NodePort
  selector:
    app: pvc-nfs-pod  
  ports:
  - port: 80
    targetPort: nginx-port
