def label = "slave-${UUID.randomUUID().toString()}"

def helmRepo(Map args) {

  sh "cat /proc/version"
  sh "uname -a"
  sh "cat /etc/hosts"

  println "add devops-example repo"
  sh "helm repo add --username ${args.username} --password ${args.password} devops-example https://registry.aaron.com:32656/chartrepo/devops-example"

  println "update repo"
  sh "helm repo update"

  println "Get Chart package"
  sh """
    helm fetch devops-example/polling
    echo "fetch chart package successfully, start unzipping the package"
    tar -xzvf polling-0.1.0.tgz
    """
}

def helmDeploy(Map args) {

    helmRepo(args)

    if (args.dry_run) {
        println "Debug application"
        sh "helm upgrade --dry-run --debug --install ${args.name} ${args.chartDir} --set persistence.persistentVolumeClaim.database.storageClass=database --set api.image.repository=${args.image} --set api.image.tag=${args.tag} --set imagePullSecrets[0].name=myreg --namespace=${args.namespace}"
    } else {
        println "deploy application"
        sh "helm upgrade --install ${args.name} ${args.chartDir} --set persistence.persistentVolumeClaim.database.storageClass=database --set api.image.repository=${args.image} --set api.image.tag=${args.tag} --set imagePullSecrets[0].name=myreg --namespace=${args.namespace}"
        echo "application ${args.name}  deploy success. can use helm status ${args.name} to get application status"
    }
}

podTemplate(label: label, serviceAccount: 'jenkins', containers: [
  containerTemplate(name: 'maven', image: 'maven:3.6-alpine', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'st22ab889/helm-kubectl:3.7.1', command: 'cat', ttyEnabled: true)
], volumes: [
  hostPathVolume(mountPath: '/root/.m2', hostPath: '/var/run/m2'),
  hostPathVolume(mountPath: '/home/jenkins/.kube', hostPath: '/root/.kube'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  hostPathVolume(mountPath: '/etc/hosts', hostPath: '/etc/host/hosts'),
  hostPathVolume(mountPath: '/etc/pki', hostPath: '/etc/pki')
]) {
  node(label) {
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def imageTag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    def dockerRegistryUrl = "registry.aaron.com:32656"
    def imageEndpoint = "devops-example/polling-api"
    def image = "${dockerRegistryUrl}/${imageEndpoint}"

    stage('unit test') {
      echo "1. test stage"
    }
    stage('code building and packaging') {
      try {
        container('maven') {
          echo "2. Code building and packaging stage"
          sh "mvn clean package -Dmaven.test.skip=true"
        }
      } catch (exc) {
        println "build failure - ${currentBuild.fullDisplayName}"
        throw(exc)
      }
    }
    stage('build docker image') {
      withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId: 'dockerhub',
        usernameVariable: 'DOCKER_HUB_USER',
        passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
          container('docker') {
            echo "3. build Docker image stage"
            sh """
              docker login ${dockerRegistryUrl} -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
              docker build -t ${image}:${imageTag} .
              docker push ${image}:${imageTag}
              """
          }
      }
    }
    stage('helm deploy application') {
      withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId: 'dockerhub',
        usernameVariable: 'DOCKER_HUB_USER',
        passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
          container('helm') {
            // todo 可以做分支判断
            echo "4. [INFO] start Helm deploy"
            helmDeploy(
                dry_run     : false,
                name        : "polling",
                chartDir    : "polling",
                namespace   : "devops-example",
                tag         : "${imageTag}",
                image       : "${image}",
                username    : "${DOCKER_HUB_USER}",
                password    : "${DOCKER_HUB_PASSWORD}"
            )
            echo "[INFO] Helm deploy application successfully"
          }
      }
    }
  }
}